/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/bootstrap-web-component.js":
/*!*******************************************!*\
  !*** ./src/js/bootstrap-web-component.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BootstrapWebComponent: () => (/* binding */ BootstrapWebComponent)\n/* harmony export */ });\nclass BootstrapWebComponent extends HTMLElement {\r\n\r\n    constructor(templateName) {\r\n        super();\r\n        this.attachShadow({ mode: 'open' });\r\n        this.templateName = templateName;\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.render();\r\n    }\r\n\r\n    render() {\r\n        const template = document.getElementById(this.templateName);\r\n        const node = document.importNode(template.content, true);\r\n        this.shadowRoot.innerHTML = ''; // Clear the shadow root\r\n\r\n        const link = document.createElement('link');\r\n        link.setAttribute('rel', 'stylesheet');\r\n        link.setAttribute('href', 'https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css');\r\n        this.shadowRoot.appendChild(link);\r\n\r\n        this.shadowRoot.appendChild(node);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://eforms-sdk-explorer/./src/js/bootstrap-web-component.js?");

/***/ }),

/***/ "./src/js/index-card.js":
/*!******************************!*\
  !*** ./src/js/index-card.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexCard: () => (/* binding */ IndexCard)\n/* harmony export */ });\n/* harmony import */ var _bootstrap_web_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bootstrap-web-component */ \"./src/js/bootstrap-web-component.js\");\n\r\n\r\nclass IndexCard extends _bootstrap_web_component__WEBPACK_IMPORTED_MODULE_0__.BootstrapWebComponent {\r\n \r\n    static get observedAttributes() {\r\n        return ['title', 'subtitle', 'action-name'];\r\n    }\r\n\r\n    constructor() {\r\n        super('index-card-template');\r\n        this.propertyCards = [];\r\n        this.actionHandler = null;\r\n    }\r\n\r\n    setActionHandler(handler) {\r\n        this.actionHandler = handler;\r\n    }\r\n\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        if (oldValue === newValue) {\r\n            return;\r\n        }\r\n\r\n        if (name === 'title') {\r\n            this.title = newValue;\r\n        } else if (name === 'subtitle') {\r\n            this.subTitle = newValue;\r\n        } else if (name === 'action-name') {\r\n            this.actionName = newValue;\r\n        }\r\n\r\n        if (this.isConnected) {\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        super.render();\r\n\r\n        const propertyList = this.shadowRoot.querySelector('#property-list');\r\n        this.propertyCards.forEach(propertyCard => propertyList.append(propertyCard));\r\n\r\n        this.shadowRoot.querySelector('#title').textContent = this.title;\r\n        this.shadowRoot.querySelector('#subtitle').textContent = this.subTitle;\r\n\r\n        const button = this.shadowRoot.querySelector('#action-button');\r\n        button.textContent = this.actionName;\r\n        button.onclick = this.actionHandler;\r\n    }\r\n\r\n    appendProperty(propertyCard) {\r\n\r\n        this.propertyCards.push(propertyCard[0]);\r\n        if (this.isConnected) {\r\n            this.render();\r\n        }\r\n    }\r\n}\r\n\r\ncustomElements.define('index-card', IndexCard);\n\n//# sourceURL=webpack://eforms-sdk-explorer/./src/js/index-card.js?");

/***/ }),

/***/ "./src/js/property-card.js":
/*!*********************************!*\
  !*** ./src/js/property-card.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PropertyCard: () => (/* binding */ PropertyCard)\n/* harmony export */ });\n/* harmony import */ var _bootstrap_web_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bootstrap-web-component.js */ \"./src/js/bootstrap-web-component.js\");\n\r\n\r\nclass PropertyCard extends _bootstrap_web_component_js__WEBPACK_IMPORTED_MODULE_0__.BootstrapWebComponent {\r\n\r\n    static get observedAttributes() {\r\n        return ['property-name', 'new-property-value', 'old-property-value'];\r\n    }\r\n\r\n    constructor() {\r\n        super('property-card-template');\r\n    }\r\n\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        if (oldValue === newValue) {\r\n            return;\r\n        }\r\n\r\n        if (name === 'property-name') {\r\n            this.propertyName = newValue;\r\n        } else if (name === 'new-property-value') {\r\n            this.newPropertyValue = newValue;\r\n        } else if (name === 'old-property-value') {\r\n            this.oldPropertyValue = newValue;\r\n        }\r\n\r\n        if (this.isConnected) {\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        super.render();\r\n\r\n        this.shadowRoot.querySelector('#property-name').textContent = this.propertyName; // Show the name\r\n        this.shadowRoot.querySelector('#new-property-value').innerHTML = this.newPropertyValue; // Show the new value\r\n        this.shadowRoot.querySelector('#old-property-value').innerHTML = this.oldPropertyValue; // Show the old value\r\n\r\n        if (this.oldPropertyValue === undefined) {\r\n            this.shadowRoot.querySelector('#list-item').classList.add('added-property');\r\n            this.shadowRoot.querySelector('#old-property-value').style.display = 'none';\r\n        } else if (this.newPropertyValue === undefined) {\r\n            this.shadowRoot.querySelector('#list-item').classList.add('removed-property');\r\n            this.shadowRoot.querySelector('#new-property-value').style.display = 'none';\r\n        } else if (this.newPropertyValue !== this.oldPropertyValue) {\r\n            this.shadowRoot.querySelector('#list-item').classList.add('changed-property');\r\n            this.shadowRoot.querySelector('#new-property-value').classList.add('new-property-value');\r\n            this.shadowRoot.querySelector('#old-property-value').classList.add('old-property-value');\r\n        } else {\r\n            this.shadowRoot.querySelector('#old-property-value').style.display = 'none';\r\n        }    \r\n    }\r\n}\r\n\r\ncustomElements.define('property-card', PropertyCard);\n\n//# sourceURL=webpack://eforms-sdk-explorer/./src/js/property-card.js?");

/***/ }),

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _property_card_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./property-card.js */ \"./src/js/property-card.js\");\n/* harmony import */ var _index_card_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-card.js */ \"./src/js/index-card.js\");\n\r\n\r\n\r\nconst appConfig = {\r\n    tagsBaseUrl: 'https://api.github.com/repos/OP-TED/eForms-SDK',\r\n    rawBaseUrl: 'https://raw.githubusercontent.com/OP-TED/eForms-SDK',\r\n    noticeTypesFileUrl: 'https://api.github.com/repos/OP-TED/eForms-SDK/contents/notice-types'\r\n};\r\n\r\nconst appState = {\r\n    sortedData: [],\r\n    versionData: [],\r\n    comparisonData: [],\r\n    selectedTagName: '',\r\n    selectedComparisonTagName: '',\r\n    selectedNoticeTypeFile: 'notice-types.json',\r\n    activeTab: 'fields'\r\n\r\n};\r\n\r\nconst domElements = {\r\n    loadingSpinner: $('#loadingSpinner'),\r\n    noticeTypesSpinner: $('#noticeTypesSpinner'),\r\n    apiStatus: $('#apiStatus'),\r\n    xmlStructureTree: $('#xmlStructureTree'),\r\n    tagsDropdown: $('#tagsDropdown'),\r\n    comparisonDropdown: $('#comparisonDropdown'),\r\n    noticeTypesDropdown: $('#noticeTypesDropdown'),\r\n    noticeTypesTree: $('#noticeTypesTree'),\r\n    fieldDetailsContent: $('#fieldDetailsContent'),\r\n    noticeTypesComparisonContent: $('#noticeTypesComparisonContent'),\r\n    noticeTypesDetails: $('#noticeTypesDetails')\r\n};\r\n\r\nfunction toggleLoadingSpinner(show, spinnerElement = domElements.loadingSpinner) {\r\n    if (show) {\r\n        spinnerElement.show();\r\n    } else {\r\n        spinnerElement.hide();\r\n    }\r\n}\r\nfunction clearApiStatus() {\r\n    domElements.apiStatus.text('');\r\n}\r\n\r\n\r\nfunction buildTreeData(xmlStructure, fieldsComparisonResults) {\r\n\r\n    const treeDataMap = new Map(xmlStructure.map(node => [node.id, {\r\n        id: node.id,\r\n        parent: node.parentId || \"#\",\r\n        text: node.name || node.id,\r\n        state: {\r\n            opened: true\r\n        },\r\n        li_attr: node.nodeChange === 'removed' ? { class: 'removed-node' } :\r\n            node.nodeChange === 'added' ? { class: 'added-node' } :\r\n                node.nodeChange === 'edited' ? { class: 'edited-node' } : {}\r\n    }]));\r\n\r\n    fieldsComparisonResults.forEach(field => {\r\n        treeDataMap.set(field.id, {\r\n            id: field.id,\r\n            parent: field.parentNodeId,\r\n            text: field.name || field.id,\r\n            icon: 'jstree-file',\r\n            state: {\r\n                opened: true\r\n            },\r\n            li_attr: field.nodeChange === 'removed' ? { class: 'removed-node' } :\r\n                field.nodeChange === 'added' ? { class: 'added-node' } :\r\n                    field.nodeChange === 'edited' ? { class: 'edited-node' } : {}\r\n        });\r\n    });\r\n\r\n    return Array.from(treeDataMap.values());\r\n}\r\n\r\nfunction initializeTree(xmlStructure, fieldsComparisonResults) {\r\n    if (domElements.xmlStructureTree.jstree(true)) {\r\n        domElements.xmlStructureTree.jstree(\"destroy\");\r\n    }\r\n    domElements.xmlStructureTree.jstree({\r\n        core: {\r\n            data: buildTreeData(xmlStructure, fieldsComparisonResults),\r\n            check_callback: true\r\n        },\r\n        plugins: [\"wholerow\"]\r\n    })\r\n\r\n    domElements.xmlStructureTree.on(\"select_node.jstree\", function (e, data) {\r\n        const selectedFieldId = data.node.id;\r\n        const fieldDetails = fieldsComparisonResults.find(field => field.id === selectedFieldId);\r\n        if (fieldDetails) {\r\n            let oldMap = new Map(appState.comparisonDataFields.map(node => [node.id, node]));\r\n            let newMap = new Map(appState.versionDataFields.map(node => [node.id, node]));\r\n            displayFieldDetails(fieldDetails, oldMap, newMap, domElements.fieldDetailsContent, 'id');\r\n        }\r\n        const nodeDetails = xmlStructure.find(field => field.id === selectedFieldId);\r\n        if (nodeDetails) {\r\n            let oldMap = new Map(appState.comparisonData.map(node => [node.id, node]));\r\n            let newMap = new Map(appState.versionData.map(node => [node.id, node]));\r\n            displayFieldDetails(nodeDetails, oldMap, newMap, domElements.fieldDetailsContent, 'id');\r\n\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction displayProperty(key, newValue, oldValue) {\r\n\r\n    // Format the new value\r\n    if (_.isObject(newValue) || Array.isArray(newValue)) {\r\n        newValue = formatObjectValue(newValue);\r\n    }\r\n\r\n    // Format the old value\r\n    if (_.isObject(oldValue) || Array.isArray(oldValue)) {\r\n        oldValue = formatObjectValue(oldValue);\r\n    }\r\n\r\n    const $component = $('<property-card/>');\r\n    $component.attr('property-name', key + ': ');\r\n    $component.attr('new-property-value', newValue);\r\n    $component.attr('old-property-value', oldValue);\r\n\r\n    return $component;\r\n}\r\n\r\nfunction displayFieldDetails(data, oldMap, newMap, container, uniqueKey = 'id') {\r\n    function createTree(uniqueId) {\r\n        const newField = newMap.get(uniqueId);\r\n        const oldField = oldMap.get(uniqueId);\r\n        const $ul = $('<ul class=\"list-group\">');\r\n\r\n        const fieldToIterate = newField || oldField;\r\n\r\n        for (const [key, value] of Object.entries(fieldToIterate)) {\r\n            if (key === 'content') {\r\n                continue;\r\n            }\r\n            const newValue = newField ? newField[key] : undefined;\r\n            const oldValue = oldField ? oldField[key] : undefined;\r\n            const $propertyTemplate = displayProperty(key, newField ? newValue : undefined, oldValue);\r\n            $ul.append($propertyTemplate);\r\n        }\r\n\r\n        // Handle removed properties in oldField that are not in newField\r\n        if (newField) {\r\n            for (const key in oldField) {\r\n                if (!newField.hasOwnProperty(key) && key !== 'content') {\r\n                    const $removedPropertyTemplate = displayProperty(key, undefined, oldField[key]);\r\n                    $ul.append($removedPropertyTemplate);\r\n                }\r\n            }\r\n        }\r\n\r\n        return $ul;\r\n    }\r\n\r\n    // Clear existing content\r\n    $(container).empty();\r\n\r\n    if (Array.isArray(data)) {\r\n        data.forEach(item => {\r\n            const $itemTree = createTree(item[uniqueKey]);\r\n            const $itemContainer = $('<div class=\"notice-type-card mb-3\"></div>').append($itemTree);\r\n            $(container).append($itemContainer);\r\n        });\r\n    } else {\r\n        const $tree = createTree(data[uniqueKey]);\r\n        $(container).append($tree);\r\n    }\r\n}\r\n\r\nfunction displayNoticeTypeCard(data, oldMap, newMap, container, uniqueKey = 'id') {\r\n    function createTree(uniqueId) {\r\n        const newField = newMap.get(uniqueId);\r\n        const oldField = oldMap.get(uniqueId);\r\n\r\n        const component = document.createElement('index-card');\r\n\r\n        const fieldToIterate = newField || oldField;\r\n\r\n        for (const [key, value] of Object.entries(fieldToIterate)) {\r\n            if (key === 'content') {\r\n                continue;\r\n            }\r\n            const newValue = newField ? newField[key] : undefined;\r\n            const oldValue = oldField ? oldField[key] : undefined;\r\n            const $propertyTemplate = displayProperty(key, newField ? newValue : undefined, oldValue);\r\n\r\n            component.appendProperty($propertyTemplate);\r\n            component.setAttribute('action-name', 'Compare!');\r\n\r\n            if (key === 'subTypeId') {\r\n                component.setAttribute('title', value);\r\n                component.setActionHandler(function (e) {\r\n                    e.preventDefault();\r\n                    selectNoticeSubtype(newValue + '.json');\r\n                });\r\n            } else if (key === 'type') {\r\n                component.setAttribute('subtitle', value);\r\n            }\r\n        }\r\n\r\n        // Handle removed properties in oldField that are not in newField\r\n        if (newField) {\r\n            for (const key in oldField) {\r\n                if (!newField.hasOwnProperty(key) && key !== 'content') {\r\n                    const $removedPropertyTemplate = displayProperty(key, undefined, oldField[key]);\r\n                    component.appendProperty($removedPropertyTemplate);\r\n                }\r\n            }\r\n        }\r\n\r\n        return component;\r\n    }\r\n\r\n    // Clear existing content\r\n    $(container).empty();\r\n\r\n    if (Array.isArray(data)) {\r\n        data.forEach(item => {\r\n            const $itemTree = createTree(item[uniqueKey]);\r\n            const $itemContainer = $('<div class=\"notice-type-card mb-3\"></div>').append($itemTree);\r\n            $(container).append($itemContainer);\r\n        });\r\n    } else {\r\n        const $tree = createTree(data[uniqueKey]);\r\n        $(container).append($tree);\r\n    }\r\n}\r\n\r\nfunction formatObjectValue(obj) {\r\n    return _.isObject(obj) ? JSON.stringify(obj, null, 2).replace(/\\n/g, '<br>').replace(/ /g, '&nbsp;') : obj;\r\n}\r\n\r\nfunction areValuesEquivalent(a, b) {\r\n    if (_.isEqual(a, b)) {\r\n        return true;\r\n    }\r\n\r\n    if (Array.isArray(a) && Array.isArray(b)) {\r\n        if (a.length !== b.length) return false;\r\n        for (let i = 0; i < a.length; i++) {\r\n            if (!_.isEqual(a[i], b[i])) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n\r\nasync function fetchAndDisplayFieldsContent(tagName, isTagsDropdown) {\r\n    clearApiStatus();\r\n    domElements.tagsDropdown.prop('disabled', true);\r\n    domElements.comparisonDropdown.prop('disabled', true);\r\n    const url = `${appConfig.rawBaseUrl}/${tagName}/fields/fields.json`;\r\n    try {\r\n        const response = await $.ajax({ url, dataType: 'json' });\r\n        const fieldsData = response;\r\n\r\n        if (isTagsDropdown) {\r\n            appState.versionData = fieldsData.xmlStructure;\r\n            appState.versionDataFields = fieldsData.fields;\r\n            fieldsData.xmlStructure[0].version = fieldsData.sdkVersion;\r\n\r\n        } else {\r\n            fieldsData.xmlStructure[0].version = fieldsData.sdkVersion;\r\n            appState.comparisonData = fieldsData.xmlStructure;\r\n            appState.comparisonDataFields = fieldsData.fields;\r\n            if (appState.versionData && appState.comparisonData) {\r\n                const xmlComparisonResults = compareDataStructures(appState.comparisonData, appState.versionData, 'id');\r\n                const fieldsComparisonResults = compareDataStructures(appState.comparisonDataFields, appState.versionDataFields, 'id', true);\r\n                initializeTree(xmlComparisonResults, fieldsComparisonResults);\r\n            }\r\n        }\r\n    } catch (error) {\r\n        updateApiStatus('Failed to load data.', false);\r\n        console.error('Error fetching and displaying fields content:', error);\r\n    } finally {\r\n        domElements.tagsDropdown.prop('disabled', false);\r\n        domElements.comparisonDropdown.prop('disabled', false);\r\n        updateApiStatus(`Data successfully loaded for SDK version ${appState.selectedTagName} and compared with ${appState.selectedComparisonTagName}`, true);\r\n\r\n    }\r\n}\r\n\r\nasync function fetchAndDisplayNoticeTypes(selectedTagName, selectedComparisonTagName) {\r\n    toggleLoadingSpinner(true, domElements.noticeTypesSpinner);\r\n    clearApiStatus();\r\n\r\n    try {\r\n        const selectedUrl = constructNoticeTypesUrl(selectedTagName, appState.selectedNoticeTypeFile);\r\n        const comparisonUrl = constructNoticeTypesUrl(selectedComparisonTagName, appState.selectedNoticeTypeFile);\r\n        const [selectedNoticeTypesData, comparisonNoticeTypesData] = await Promise.all([\r\n            fetchNoticeTypesData(selectedUrl),\r\n            fetchNoticeTypesData(comparisonUrl)\r\n        ]);\r\n\r\n        const isMainNoticeTypesFile = appState.selectedNoticeTypeFile === 'notice-types.json';\r\n\r\n        if (isMainNoticeTypesFile) {\r\n            showComparisonView();\r\n            const comparisonResults = compareNoticeTypes(selectedNoticeTypesData, comparisonNoticeTypesData);\r\n            let oldMap = new Map(selectedNoticeTypesData.noticeSubTypes.map(node => [node.subTypeId, node]));\r\n            let newMap = new Map(comparisonNoticeTypesData.noticeSubTypes.map(node => [node.subTypeId, node]));\r\n            displayNoticeTypeCard(comparisonResults, oldMap, newMap, domElements.noticeTypesComparisonContent, 'subTypeId');\r\n        } else {\r\n            let oldMap = flattenToMap(selectedNoticeTypesData.content);\r\n            let newMap = flattenToMap(comparisonNoticeTypesData.content);\r\n            const comparisonResults = compareNoticeTypes(selectedNoticeTypesData, comparisonNoticeTypesData);\r\n            showTreeView(comparisonResults, oldMap, newMap);\r\n        }\r\n\r\n        updateApiStatus('Successfully loaded notice types.');\r\n    } catch (error) {\r\n        updateApiStatus('Failed to load notice types.', false);\r\n        console.error('Error during notice types operation:', error);\r\n    } finally {\r\n        toggleLoadingSpinner(false, domElements.noticeTypesSpinner);\r\n    }\r\n}\r\n\r\nasync function fetchAndPopulateNoticeTypesDropdown() {\r\n    try {\r\n        toggleLoadingSpinner(true, domElements.noticeTypesSpinner);;\r\n        const response = await $.ajax({ url: appConfig.noticeTypesFileUrl, dataType: 'json' });\r\n        const noticeTypesFiles = response.filter(item => item.type === 'file');\r\n\r\n        const $dropdownMenu = $('.dropdown-menu');\r\n        $dropdownMenu.empty(); // Clear any existing items\r\n\r\n        noticeTypesFiles.forEach(file => {\r\n            if (file.name !== 'notice-types.json') {\r\n                const $dropdownItem = $('<a class=\"dropdown-item\" href=\"#\">').text(file.name);\r\n                $dropdownItem.on('click', function (e) {\r\n                    e.preventDefault(); // Prevent default anchor click behavior\r\n                    selectNoticeSubtype(file.name);\r\n                });\r\n                $dropdownMenu.append($dropdownItem);\r\n            }\r\n        });\r\n\r\n        // Bind the 'notice-types.json' action to the \"Overview\" link\r\n        $('.nav-link.active').on('click', function (e) {\r\n            e.preventDefault(); // Prevent default anchor click behavior\r\n            selectNoticeSubtype('notice-types.json');\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching notice types:', error);\r\n    } finally {\r\n        toggleLoadingSpinner(false, domElements.noticeTypesSpinner);\r\n    }\r\n}\r\n\r\nfunction selectNoticeSubtype(filename) {\r\n    appState.selectedNoticeTypeFile = filename;\r\n\r\n    toggleLoadingSpinner(true, domElements.noticeTypesSpinner);\r\n\r\n    fetchAndDisplayNoticeTypes(appState.selectedTagName, appState.selectedComparisonTagName)\r\n        .then(() => {\r\n            toggleLoadingSpinner(false, domElements.noticeTypesSpinner);\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching and displaying notice types:', error);\r\n            toggleLoadingSpinner(false, domElements.noticeTypesSpinner);\r\n            updateApiStatus('Failed to load notice types.', false);\r\n        });\r\n}\r\n\r\n\r\n\r\nfunction constructNoticeTypesUrl(tagName, fileName) {\r\n    return `${appConfig.rawBaseUrl}/${tagName}/notice-types/${fileName}`;\r\n}\r\n\r\nasync function fetchNoticeTypesData(url) {\r\n    try {\r\n        const response = await $.ajax({ url, dataType: 'json' });\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Error fetching notice types:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction compareNoticeSubTypes(oldNoticeSubTypes, newNoticeSubTypes) {\r\n    let comparisonResults = [];\r\n\r\n    const oldMap = new Map(oldNoticeSubTypes.map(item => [item.subTypeId, item]));\r\n    const newMap = new Map(newNoticeSubTypes.map(item => [item.subTypeId, item]));\r\n\r\n    // Check for removed or edited items\r\n    oldNoticeSubTypes.forEach(oldItem => {\r\n        if (!newMap.has(oldItem.subTypeId)) {\r\n            comparisonResults.push({ ...oldItem, changeType: 'removed' });\r\n        } else {\r\n            const newItem = newMap.get(oldItem.subTypeId);\r\n            if (!areValuesEquivalent(oldItem, newItem)) {\r\n                comparisonResults.push({ ...newItem, changeType: 'edited' });\r\n            }\r\n        }\r\n    });\r\n\r\n    // Check for added items\r\n    newNoticeSubTypes.forEach(newItem => {\r\n        if (!oldMap.has(newItem.subTypeId)) {\r\n            comparisonResults.push({ ...newItem, changeType: 'added' });\r\n        }\r\n    });\r\n\r\n    return comparisonResults;\r\n}\r\n\r\nfunction compareNoticeTypes(selectedData, comparisonData) {\r\n    const selectedKey = selectedData.noticeSubTypes ? 'noticeSubTypes' : 'content';\r\n    const comparisonKey = comparisonData.noticeSubTypes ? 'noticeSubTypes' : 'content';\r\n    const uniqueKey = selectedData.noticeSubTypes ? 'subTypeId' : 'id';\r\n\r\n    const comparisonResults = compareDataStructures(selectedData[selectedKey], comparisonData[comparisonKey], uniqueKey, true);\r\n    return comparisonResults;\r\n}\r\n\r\nfunction processNoticeTypesJsTree(content, parentId = \"#\") {\r\n    let treeData = [];\r\n    content.forEach(item => {\r\n        let node = {\r\n            id: item.id,\r\n            parent: parentId,\r\n            text: item.id,\r\n            state: { opened: true },\r\n            type: item.contentType === 'group' ? \"default\" : \"field\",\r\n            li_attr: item.nodeChange === 'removed' ? { class: 'removed-node' } :\r\n                item.nodeChange === 'added' ? { class: 'added-node' } :\r\n                    item.nodeChange === 'edited' ? { class: 'edited-node' } : {}\r\n        };\r\n        // Adding icon for items with contentType \"file\"\r\n        if (item.contentType === \"field\") {\r\n            node.icon = 'jstree-file';\r\n        }\r\n        treeData.push(node);\r\n        if (item.contentType === 'group' && item.content) {\r\n            let children = processNoticeTypesJsTree(item.content, item.id);\r\n            treeData = treeData.concat(children);\r\n        }\r\n    });\r\n\r\n    return treeData;\r\n}\r\n\r\nfunction showComparisonView() {\r\n    // Hide the tree view and details view\r\n    $('#noticeTypesTreeContainer').hide();\r\n    $('#noticeTypesDetails').hide();\r\n\r\n    // Show the comparison view\r\n    $('.notice-types-comparison').show();\r\n    $('#noticeTypesComparisonContent').show();\r\n}\r\n\r\nfunction showTreeView(treeData, oldMap, newMap) {\r\n    // Remove comparison view if it exists\r\n    $('.notice-types-comparison').hide();\r\n    $('#noticeTypesComparisonContent').hide();\r\n\r\n    // Show the tree view and details view\r\n    $('#noticeTypesTreeContainer').show();\r\n    $('#noticeTypesDetails').show();\r\n\r\n    $('<div/>', {\r\n        id: 'noticeTypesTree'\r\n    }).appendTo('#noticeTypesTreeContainer');\r\n\r\n    // initializeNoticeTypesTree(treeData);\r\n    let jsTreeData = processNoticeTypesJsTree(treeData);\r\n    $('#noticeTypesComparisonContainer').hide();\r\n    $('#noticeTypesTreeContainer').show();\r\n\r\n    // Check if the tree view is already initialized\r\n    if (domElements.noticeTypesTree.jstree(true)) {\r\n        // If already initialized, destroy the existing tree before creating a new one\r\n        domElements.noticeTypesTree.jstree(\"destroy\");\r\n    }\r\n    domElements.noticeTypesTree.jstree({\r\n        core: {\r\n            data: jsTreeData,\r\n            check_callback: true\r\n        },\r\n        plugins: [\"wholerow\"]\r\n    });\r\n\r\n    domElements.noticeTypesTree.on(\"select_node.jstree\", function (e, data) {\r\n        const selectedFieldId = data.node.id;\r\n        const fieldDetails = findFieldById(treeData, selectedFieldId)\r\n        displayFieldDetails(fieldDetails, oldMap, newMap, domElements.noticeTypesDetails);\r\n\r\n    });\r\n    $('#noticeTypesTreeContainer').show();\r\n}\r\n\r\nfunction flattenToMap(data, map = new Map()) {\r\n    data.forEach(item => {\r\n        map.set(item.id, item);\r\n        if (Array.isArray(item.content)) {\r\n            flattenToMap(item.content, map); // Recursively process nested arrays\r\n        }\r\n    });\r\n    return map;\r\n}\r\n\r\nfunction findFieldById(data, fieldId) {\r\n    let result = null;\r\n    function searchContent(content) {\r\n        for (let item of content) {\r\n            if (item.id === fieldId) {\r\n                result = item;\r\n                return true;\r\n            }\r\n            if (Array.isArray(item.content)) {\r\n                if (searchContent(item.content)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    searchContent(data);\r\n    return result;\r\n}\r\n\r\n\r\nfunction buildTreeDataForNoticeTypes(noticeData, parent = \"#\") {\r\n    let treeData = [];\r\n\r\n    noticeData.forEach(item => {\r\n        let node = {\r\n            id: item.id,\r\n            parent: parent,\r\n            text: item.description,\r\n            state: { opened: true },\r\n            type: item.contentType === 'group' ? \"default\" : \"file\",\r\n            li_attr: { class: item.contentType === 'group' ? 'group-node' : 'field-node' }\r\n        };\r\n\r\n        treeData.push(node);\r\n\r\n        // If this is a group and has content, recursively get the children\r\n        if (item.contentType === 'group' && item.content && item.content.length > 0) {\r\n            let children = buildTreeDataForNoticeTypes(item.content, item.id);\r\n            treeData = treeData.concat(children);\r\n        }\r\n    });\r\n\r\n    return treeData;\r\n}\r\n\r\n\r\nfunction displayNoticeTypeDetails(nodeData) {\r\n    domElements.noticeTypesDetails.empty();\r\n\r\n    if (!nodeData) {\r\n        domElements.noticeTypesDetails.html('Select a node to see details.');\r\n        return;\r\n    }\r\n    const $ul = $('<ul class=\"list-group\">');\r\n    Object.entries(nodeData).forEach(([key, value]) => {\r\n        const $li = $('<li class=\"list-group-item\"></li>');\r\n        $li.html(`<strong>${key}:</strong> ${value}`);\r\n        $ul.append($li);\r\n    });\r\n\r\n    domElements.noticeTypesDetails.append($ul);\r\n}\r\n\r\nfunction compareDataStructures(oldStructure, newStructure, uniqueKey = 'id', performDeepComparison = false) {\r\n    let comparisonResults = [];\r\n\r\n    let oldMap = new Map(oldStructure.map(node => [node[uniqueKey], node]));\r\n    let newMap = new Map(newStructure.map(node => [node[uniqueKey], node]));\r\n\r\n    // First, check for removed nodes\r\n    oldStructure.forEach(oldNode => {\r\n        if (!newMap.has(oldNode[uniqueKey])) {\r\n            comparisonResults.push({ ...oldNode, nodeChange: 'removed' });\r\n        }\r\n    });\r\n\r\n    // Then, check for added nodes\r\n    newStructure.forEach(newNode => {\r\n        if (!oldMap.has(newNode[uniqueKey])) {\r\n            comparisonResults.push({ ...newNode, nodeChange: 'added' });\r\n        }\r\n    });\r\n\r\n    // Finally, check for edited nodes\r\n    oldStructure.forEach(oldNode => {\r\n        if (newMap.has(oldNode[uniqueKey])) {\r\n            const newNode = newMap.get(oldNode[uniqueKey]);\r\n            if (performDeepComparison && !areValuesEquivalent(oldNode, newNode)) {\r\n                comparisonResults.push({ ...newNode, nodeChange: 'edited' });\r\n            } else if (!comparisonResults.some(node => node[uniqueKey] === oldNode[uniqueKey])) {\r\n                comparisonResults.push({ ...oldNode, nodeChange: 'unchanged' });\r\n            }\r\n        }\r\n    });\r\n\r\n    return comparisonResults;\r\n}\r\n\r\n\r\nfunction findIndexByVersion(versionName) {\r\n    return sortedData.findIndex(function (item) {\r\n        return item.name === versionName;\r\n    });\r\n}\r\n\r\n\r\nasync function populateDropdown() {\r\n    toggleLoadingSpinner(true);\r\n    clearApiStatus();\r\n    try {\r\n        const response = await $.ajax({\r\n            url: `${appConfig.tagsBaseUrl}/tags`,\r\n            dataType: 'json'\r\n        });\r\n        const data = response.sort((a, b) => b.name.localeCompare(a.name));\r\n\r\n        appState.sortedData = data;\r\n        domElements.tagsDropdown.empty();\r\n        domElements.comparisonDropdown.empty();\r\n\r\n        data.forEach(item => {\r\n            const option = $('<option>', { value: item.name, text: item.name });\r\n            domElements.tagsDropdown.append(option.clone());\r\n            domElements.comparisonDropdown.append(option);\r\n        });\r\n\r\n        domElements.tagsDropdown.val(data[0].name);\r\n        domElements.comparisonDropdown.val(data.length > 1 ? data[1].name : data[0].name);\r\n        appState.selectedTagName = data[0].name;\r\n        appState.selectedComparisonTagName = data[1].name;\r\n        await fetchAndDisplayFieldsContent(data[0].name, true);\r\n        await fetchAndDisplayFieldsContent(data[1].name, false);\r\n    } catch (error) {\r\n        updateApiStatus('API call failed to fetch tags.', false);\r\n        console.error('Error populating dropdowns:', error);\r\n    } finally {\r\n        toggleLoadingSpinner(false);\r\n    }\r\n}\r\n\r\nfunction updateApiStatus(message, isSuccess = true) {\r\n    domElements.apiStatus.text(message);\r\n\r\n    if (isSuccess) {\r\n        domElements.apiStatus.addClass('alert-success').removeClass('alert-danger');\r\n    } else {\r\n        domElements.apiStatus.addClass('alert-danger').removeClass('alert-success');\r\n    }\r\n\r\n    domElements.apiStatus.show();\r\n\r\n    setTimeout(() => {\r\n        domElements.apiStatus.fadeOut('slow');\r\n    }, 5000);\r\n}\r\n\r\nasync function fetchAndDisplayReleaseNotes() {\r\n    const releaseNotesUrl = `${appConfig.rawBaseUrl}/${appState.selectedTagName}/CHANGELOG.md`;\r\n    try {\r\n        toggleLoadingSpinner(true, domElements.noticeTypesSpinner);\r\n        const response = await fetch(releaseNotesUrl);\r\n        const markdownContent = await response.text();\r\n        displayMarkdownAsHtml(markdownContent);\r\n    } catch (error) {\r\n        console.error('Error fetching release notes:', error);\r\n        $('#release-notes').html('<p>Error loading release notes.</p>');\r\n    } finally {\r\n        toggleLoadingSpinner(false, domElements.noticeTypesSpinner);\r\n    }\r\n}\r\n\r\nfunction displayMarkdownAsHtml(markdownContent) {\r\n    const converter = new showdown.Converter();\r\n    const htmlContent = converter.makeHtml(markdownContent);\r\n    $('#release-notes').html(`<div class=\"p-3\">${htmlContent}</div>`);\r\n}\r\n\r\n$(document).ready(() => {\r\n    populateDropdown();\r\n    $('#fields-tab').on('click', function () {\r\n        appState.activeTab = 'fields';\r\n    });\r\n\r\n    $('#notice-types-tab').on('click', async function () {\r\n        toggleLoadingSpinner(true, domElements.noticeTypesSpinner);\r\n        appState.activeTab = 'notice-types';\r\n        fetchAndPopulateNoticeTypesDropdown();\r\n        await fetchAndDisplayNoticeTypes(appState.selectedTagName, appState.selectedComparisonTagName);\r\n        toggleLoadingSpinner(false, domElements.noticeTypesSpinner);\r\n\r\n    });\r\n\r\n    $('#noticeTypesTreeContainer').hide();\r\n\r\n    $('#overviewLink').on('click', async function (e) {\r\n        appState.selectedNoticeTypeFile = 'notice-types.json';\r\n        toggleLoadingSpinner(true, domElements.noticeTypesSpinner);\r\n        await fetchAndDisplayNoticeTypes(appState.selectedTagName, appState.selectedComparisonTagName);\r\n        toggleLoadingSpinner(false, domElements.noticeTypesSpinner);\r\n    });\r\n\r\n    $('#release-notes-tab').on('click', function () {\r\n        fetchAndDisplayReleaseNotes();\r\n    });\r\n\r\n});\r\n\r\ndomElements.noticeTypesDropdown.change(async function () {\r\n    const fileName = $(this).val();\r\n    appState.selectedNoticeTypeFile = fileName;\r\n    toggleLoadingSpinner(true, domElements.noticeTypesSpinner);\r\n    await fetchAndDisplayNoticeTypes(appState.selectedTagName, appState.selectedComparisonTagName);\r\n    toggleLoadingSpinner(false, domElements.noticeTypesSpinner);\r\n});\r\n\r\ndomElements.tagsDropdown.change(function () {\r\n    appState.selectedTagName = $(this).val();\r\n    $('#fieldDetailsContent').html('Select an item to see details.');\r\n    fetchDataBasedOnActiveTab();\r\n});\r\n\r\ndomElements.comparisonDropdown.change(function () {\r\n    appState.selectedComparisonTagName = $(this).val();\r\n    $('#fieldDetailsContent').html('Select an item to see details.');\r\n    fetchDataBasedOnActiveTab();\r\n});\r\n\r\n\r\nfunction fetchDataBasedOnActiveTab() {\r\n    const selectedTagName = appState.selectedTagName;\r\n    const selectedComparisonTagName = appState.selectedComparisonTagName;\r\n    if (appState.activeTab === 'fields') {\r\n        fetchAndDisplayFieldsContent(selectedTagName, true);\r\n        fetchAndDisplayFieldsContent(selectedComparisonTagName, false);\r\n    } else if (appState.activeTab === 'notice-types') {\r\n        fetchAndDisplayNoticeTypes(selectedTagName, selectedComparisonTagName);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://eforms-sdk-explorer/./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/script.js");
/******/ 	
/******/ })()
;